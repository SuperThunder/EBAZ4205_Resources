---JTAG header (J8)---
Top row: (closer to edge) all GND
Bottom row: nc nc TDI TDO TCK TMS Vcc

TCK/TMS/TDO/TDI and pulled up to Vcc by 4.7kOhm, are in series with 22 Ohm to pin

---UART Header (J7)---
Reference: Ethernet to left, SD to right
Vcc Tx Rx GND

Rx is U3.A.16 but MIO 25
Tx is U3.F.15 but MIO 24

note: Can get JTAG printf using 'CoreSight'


---JTAG HS3 adapter---
With notch at Top

TDI x   TMS TDO TCK
x   x   x   Vcc GND



---Notes on using UART to CH340C of VGA+power+serial adapter board---

CH340C is connected through Data2 connector of EBAZ4205
at right side, notch at top:

Rx  GND 12v
Tx  GND 12v

CH340 Rx: DATA2_5 -> G20 -> PS Tx
CH340 Tx: DATA2_6 -> J18 -> PS Rx

Route to EMIO (in PS conf) -> PL (XDC) -> Data2

'Should work with PS UART or by AXI UARTLite'

xdc for RX:
set_property PACKAGE_PIN J18 [get_ports{UART_1_0_rxd}]
set_property IOSTANDARD LVCMOS33 [get_ports{UART_1_0_rxd}]

xdc for TX:
set_property PACKAGE_PIN G20 [get_ports{UART_1_0_txd}]
set_property IOSTANDARD LVCMOS33 [get_ports{UART_1_0_txd}]

Make UART1 external!

One Chinese example used UART0 since UART1 is MIO24/25 routed


---Choosing UART in Vitis---
platform.spr -> modify BSP -> overview -> standalone -> stdin / stdout

Can be set to PS UART0, UART1, CoreSight, or none

Note: when using CoreSight, it inexplicably defaults to showing CoreSight for Core 1, not Core 0. 
It will say 'TCF Debug Virtual Terminal - ARM Cortex-A9 MPCore #1' underneath the 'Console' tab.
Switch with the computer screen-ish icon in the upper right of the tab bar.


---Board info---
LEDs:
W13 - Red
W14 - Green
A17 - Button (active high)



---Powering board---
Anything 5v - 12v is probably fine. Couldn't actually identify the voltage regulator for the Zynq/RAM/NAND/ethernet, but it's probably some kind of SMPS putting out 3.3v.
My expansion board uses a DC barrel jack with 5V 2A adapter, which powers the board through the connections on the Data1/2/3 ports. It's also possible to use one of the 4 pin (fan?) headers or the 6pin connector (soldering diodes / short the diode pads possibly required).



---PetaLinux notes---
Best guide here: https://webuiltawallwebuiltthepyramids.blogspot.com/2021/01/ebaz4205-petalinux-installation.html

To add extra packages, use petalinux-config -c rootfs after doing the initial petalinux-config. A surprising amount is available, even Python3 and Gnome.
However, not many can be added without overwhelming the default rootfs!
It must be changed to the second partition of the SD card as discussed here: https://forums.xilinx.com/t5/Embedded-Linux/Adding-Utilities-to-PetaLinux-Build-Causes-Boot-Failure/td-p/956119

If you enable FPGA Manager, then for some reason it does not pack the bitstream for the FPGA into boot.bin. This means that if your serial port is connected through EMIO, that never gets configured, and never does ethernet as that is also through EMIO.
relevant post: https://forums.xilinx.com/t5/Embedded-Linux/FPGA-Manager-FSBL-bitstream-Petalinux-2019-2/td-p/1049439

The solution is apparently to NOT include fpga-manager in the initial configuration, but to include fpga-util in rootfs or even directly write to the kernel device
See: https://forums.xilinx.com/t5/Embedded-Linux/Inclusion-of-the-FPGA-Manager-causes-a-petalinux-build-failure/td-p/1211157

The default SSH server, Dropbear, does not allow root logins by default. So you need to make another user using serial (or in the config stage of petalinux) or reconfigure dropbear as described here: https://forums.xilinx.com/t5/Embedded-Linux/dropbear-root-login-petalinux-2019-1/td-p/979852). However, in versions ~2020 and before, the flag used to disallow root login is broken, so if you enter the root password twice you can log in.



---Ubuntu on PetaLinux---
PetaLinux can be very limiting in that you must cross-compile any software for it (or set up a toolchain within petalinux to compile anything) and there are no pre-existing repositories for opkg (that I could find).

However, it seems fairly easy to install Ubuntu on top of PetaLinux as shown in these links:
(note: ubuntu 64 bit for ARMv8 used here)
https://highlevel-synthesis.com/2019/12/15/running-ubuntu-on-ultra96v2-using-petalinux-2019-2-with-networking-and-linux-header/

https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842231/Zynq-7000+AP+SoC+-+Installing+the+Ubuntu+Desktop+on+PetaLinux+and+Demo+Tech+Tip

https://medium.com/developments-and-implementations-on-zynq-7000-ap/install-ubuntu-16-04-lts-on-zynq-zc702-using-petalinux-2016-4-e1da902eaff7


The main difficulty for Ubuntu on EBAZ4205 seems to be that the last time a generic armhf rootfs was offered was for 16.04 (except for Raspberry Pi devices, perhaps that can be adapted?). Using Debian should also be possible as they seem to still be supporting armhf.

ubuntu core 20 (has armhf for raspi): https://cdimage.ubuntu.com/ubuntu-core/20/stable/current/

An ubuntu guide from 2011 on making a rootfs: https://wiki.ubuntu.com/ARM/RootfsFromScratch

Japanese post that provides a prebuilt Ubuntu 18.04 for EBAZ4205 that can be (directly?) flashed to an SD card: https://github.com/bjrjk/EBAZ4205



--Pynq on PetaLinux--

Good posts here on Pynq for EBAZ4205:

https://webuiltawallwebuiltthepyramids.blogspot.com/2021/01/yet-another-ebaz4205-writeup-3-pynq.html
https://webuiltawallwebuiltthepyramids.blogspot.com/2021/03/yet-another-ebaz4205-writeup-4-pynq.html

It seems like Pynq is a good option for someone who is fairly comfortable with 1) Some advanced field that benefits from FPGA acceleration, like AI with neural networks
2) FPGA development, or has someone to do it for them

It does not seem like it would be good for someone trying to learn HDL.

Possibly it could be good for intermediate skill level HDL developers that want to directly test their designs on the FPGA with Python?
